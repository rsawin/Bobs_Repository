//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HttpClient.MathServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathServiceRef.IMathSevice")]
    public interface IMathSevice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Add", ReplyAction="http://tempuri.org/IMathSevice/AddResponse")]
        double Add(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Add", ReplyAction="http://tempuri.org/IMathSevice/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Subtract", ReplyAction="http://tempuri.org/IMathSevice/SubtractResponse")]
        double Subtract(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Subtract", ReplyAction="http://tempuri.org/IMathSevice/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Multiply", ReplyAction="http://tempuri.org/IMathSevice/MultiplyResponse")]
        double Multiply(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Multiply", ReplyAction="http://tempuri.org/IMathSevice/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Divide", ReplyAction="http://tempuri.org/IMathSevice/DivideResponse")]
        double Divide(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/Divide", ReplyAction="http://tempuri.org/IMathSevice/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/CircleArea", ReplyAction="http://tempuri.org/IMathSevice/CircleAreaResponse")]
        double CircleArea(double value1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathSevice/CircleArea", ReplyAction="http://tempuri.org/IMathSevice/CircleAreaResponse")]
        System.Threading.Tasks.Task<double> CircleAreaAsync(double value1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathSeviceChannel : HttpClient.MathServiceRef.IMathSevice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathSeviceClient : System.ServiceModel.ClientBase<HttpClient.MathServiceRef.IMathSevice>, HttpClient.MathServiceRef.IMathSevice {
        
        public MathSeviceClient() {
        }
        
        public MathSeviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathSeviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathSeviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathSeviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double value1, double value2) {
            return base.Channel.Add(value1, value2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double value1, double value2) {
            return base.Channel.AddAsync(value1, value2);
        }
        
        public double Subtract(double value1, double value2) {
            return base.Channel.Subtract(value1, value2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double value1, double value2) {
            return base.Channel.SubtractAsync(value1, value2);
        }
        
        public double Multiply(double value1, double value2) {
            return base.Channel.Multiply(value1, value2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double value1, double value2) {
            return base.Channel.MultiplyAsync(value1, value2);
        }
        
        public double Divide(double value1, double value2) {
            return base.Channel.Divide(value1, value2);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double value1, double value2) {
            return base.Channel.DivideAsync(value1, value2);
        }
        
        public double CircleArea(double value1) {
            return base.Channel.CircleArea(value1);
        }
        
        public System.Threading.Tasks.Task<double> CircleAreaAsync(double value1) {
            return base.Channel.CircleAreaAsync(value1);
        }
    }
}
